\BOOKMARK [1][-]{section.1}{Introduction}{}% 1
\BOOKMARK [2][-]{subsection.1.1}{Acknowledgement}{section.1}% 2
\BOOKMARK [1][-]{section.2}{Background}{}% 3
\BOOKMARK [2][-]{subsection.2.1}{Related Work}{section.2}% 4
\BOOKMARK [3][-]{subsubsection.2.1.1}{PatchMatch}{subsection.2.1}% 5
\BOOKMARK [3][-]{subsubsection.2.1.2}{Coherency Sensitive Hashing}{subsection.2.1}% 6
\BOOKMARK [1][-]{section.3}{Implementation}{}% 7
\BOOKMARK [2][-]{subsection.3.1}{The Brute Force Version}{section.3}% 8
\BOOKMARK [2][-]{subsection.3.2}{k-d Tree Construction}{section.3}% 9
\BOOKMARK [2][-]{subsection.3.3}{Tree Traversal}{section.3}% 10
\BOOKMARK [3][-]{subsubsection.3.3.1}{Representing the Stack as an Integer}{subsection.3.3}% 11
\BOOKMARK [3][-]{subsubsection.3.3.2}{Validating Whether to Look at the second}{subsection.3.3}% 12
\BOOKMARK [2][-]{subsection.3.4}{The Full Implementation}{section.3}% 13
\BOOKMARK [1][-]{section.4}{Experimental Evaluation}{}% 14
\BOOKMARK [2][-]{subsection.4.1}{Optimisation using Sorting over Partition}{section.4}% 15
\BOOKMARK [2][-]{subsection.4.2}{Optimising Tree Traversal with Full Dimensionality Checking}{section.4}% 16
\BOOKMARK [2][-]{subsection.4.3}{Brute Force versus k-d Trees for Computing KNN}{section.4}% 17
\BOOKMARK [1][-]{section.5}{Conclusion}{}% 18
\BOOKMARK [1][-]{section*.17}{References}{}% 19
